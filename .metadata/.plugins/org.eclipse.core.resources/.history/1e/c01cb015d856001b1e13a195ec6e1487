package com.connorwojtak.main;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Set;
import java.util.Vector;

import org.reflections8.*;

public class Main {
	
	public static ArrayList<Class<? extends Throwable>> EXCEPTIONS = new ArrayList<Class<? extends Throwable>>();
	
	public static void main(String[] args) throws Throwable {
		populateExceptions();
		if(EXCEPTIONS.size() < 1) return;
		exceptionRecurser(EXCEPTIONS.size() - 1);
	}
	
	public static void populateExceptions() {
		Field f;
	    try {
	    	f = ClassLoader.class.getDeclaredField("classes");
	        f.setAccessible(true);
	        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
	        Vector<Class> classes =  (Vector<Class>) f.get(classLoader);
	        for(Class cls : classes){
	        	Class here = cls;
	        	while(!here.getSuperclass().equals(Object.class)) {
		        	if(here.getSuperclass() == Throwable.class) {
		        		EXCEPTIONS.add(cls);
		        	}
	        	}
	         }
	    } catch (Exception e) {
	    	e.printStackTrace();
	    }
		Reflections r = new Reflections("java.lang");
		Set<Class<? extends Throwable>> buffer = r.getSubTypesOf(Throwable.class);
		EXCEPTIONS.addAll(buffer);
	}
	
	@SuppressWarnings("deprecation")
	public static void exceptionRecurser(int i) throws Throwable {
		if(i > 0) {
			try {
				exceptionRecurser(i - 1);
			} catch(Throwable e) {
				e.printStackTrace();
			}
		}
		throw EXCEPTIONS.get(i).newInstance();
	}
}
