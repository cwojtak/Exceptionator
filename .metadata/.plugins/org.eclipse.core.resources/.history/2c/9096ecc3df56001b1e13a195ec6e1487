

import java.io.File;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Set;
import java.util.Vector;

public class Main {
	
	public static ArrayList<Class<? extends Throwable>> EXCEPTIONS = new ArrayList<Class<? extends Throwable>>();
	
	public static void main(String[] args) throws Throwable {
		populateExceptions();
		if(EXCEPTIONS.size() < 1) return;
		exceptionRecurser(EXCEPTIONS.size() - 1);
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public static void populateExceptions() {
		Field f;
	    try {
	        /*ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
	        Class CL_class = classLoader.getClass();
	        while (CL_class != java.lang.ClassLoader.class) {
	            CL_class = CL_class.getSuperclass();
	        }
	    	//f = classLoader.getClass().getDeclaredField("classes");
	        //f.setAccessible(true);
	        //Vector<Class> classes =  (Vector<Class>) f.get(classLoader);
	        Reflections r = new Reflections("java.io", new SubTypesScanner(false));
	        Set<Class<? extends Object>> classes = r.getSubTypesOf(Object.class);*/
	    	ArrayList<Class<?>> classes = new ArrayList<Class<?>>();
	    	System.out.println(System.getProperty("java.class.path") + "\\src\\" );
	    	checkDirectory(new File(System.getProperty("java.class.path") + "\\src\\"), "", classes);
	    	System.out.println(classes.get(0));
	        for(Class cls : classes){
	        	Class here = cls;
	        	while(!here.getSuperclass().equals(Object.class)) {
		        	if(here.getSuperclass() == Throwable.class) {
		        		EXCEPTIONS.add(cls);
		        		break;
		        	}
	        	}
	         }
	    } catch (Exception e) {
	    	e.printStackTrace();
	    }
	}
	
	@SuppressWarnings("deprecation")
	public static void exceptionRecurser(int i) throws Throwable {
		if(i > 0) {
			try {
				exceptionRecurser(i - 1);
			} catch(Throwable e) {
				e.printStackTrace();
			}
		}
		throw EXCEPTIONS.get(i).newInstance();
	}
	
	/**
	 * Private helper method
	 * 
	 * @param directory
	 *            The directory to start with
	 * @param pckgname
	 *            The package name to search for. Will be needed for getting the
	 *            Class object.
	 * @param classes
	 *            if a file isn't loaded but still is in the directory
	 * @throws ClassNotFoundException
	 */
	private static void checkDirectory(File directory, String pckgname, ArrayList<Class<?>> classes) throws ClassNotFoundException {
	    File tmpDirectory;

	    if (directory.exists() && directory.isDirectory()) {
	        final String[] files = directory.list();

	        for (final String file : files) {
	            if (file.endsWith(".java")) {
	                try {
	                    classes.add(Class.forName(pckgname + '.'
	                            + file.substring(0, file.length() - 5)));
	                } catch (final NoClassDefFoundError e) {
	                    // do nothing. this class hasn't been found by the
	                    // loader, and we don't care.
	                }
	            } else if ((tmpDirectory = new File(directory, file))
	                    .isDirectory()) {
	                checkDirectory(tmpDirectory, pckgname + "." + file, classes);
	            }
	        }
	    }
	}
}
